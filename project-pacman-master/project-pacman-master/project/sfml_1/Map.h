#pragma once
#include "PackMan.h"
class Map
{
private:
	float gridSizef;

	//Map stuff
		char lvl_1_MapDraw[100][100] = {
			"00000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000",
			"11111111111111111111111111111111111111111111111111111111",
			"10000000000000000000000000011000000000000000000000000001",
			"10*0*0*0*0*0*0*0*0*0*0*0*00110*0*0*0*0*0*0*0*0*0*0*0*001",
			"10000000000000000000000000011000000000000000000000000001",
			"10*000000000*00000000000*00110*00000000000*000000000*001",
			"10000111111000011111111000011000011111111000011111100001",
			"105001111110*00111111110*00110*00111111110*0011111105001",
			"10000111111000011111111000011000011111111000011111100001",
			"10*001111110*00111111110*00110*00111111110*001111110*001",
			"10000000000000000000000000066000000000000000000000000001",
			"10*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*001",
			"10000000000000000000000000066000000000000000000000000001",
			"10*000000000*00000*00000000660000000*00000*000000000*001",
			"10000111111000011000011111111111111000011000011111100001",
			"10*001111110*00110*00111111111111110*00110*001111110*001",
			"10000000000000011000000000011000000000011000000000000001",
			"10*0*0*0*0*0*00110*0*0*0*00110*0*0*0*00110*0*0*0*0*0*001",
			"10000000000000011000000000011000000000011000000000000001",
			"100000000000*00110000000000110000000000110*0000000000001",
			"11111111111000011111111000011000011111111000011111111111",
			"000000000010*00111111110000110000111111110*0010000000000",
			"00000000001000011000000000000000000000011000010000000000",
			"000000000010*00110000000000000000000000110*0010000000000",
			"00000000001000011000000000000000000000011000010000000000",
			"000000000010*00110000000000000000000000110*0010000000000",
			"00000000001000011000011111----11111000011000010000000000",
			"111111111110*00110000100000000000010000110*0011111111111",
			"00000000000000000000010000000000001000000000000000000000",
			"*0*0*0*0*0*0*00000000100000000000010000000*0*0*0*0*0*0*0",
			"02000000000000000000010000000000001000000000000000000030",
			"000000000000*00000000100000000000010000000*0000000000000",
			"11111111111000011000010000000000001000011000011111111111",
			"000000000010*00110000111111111111110000110*0010000000000",
			"00000000001000011000000000000000000000011000010000000000",
			"000000000010*00110000000000000000000000110*0010000000000",
			"00000000001000011000000000000000000000011000010000000000",
			"000000000010*00110000000000000000000000110*0010000000000",
			"00000000001000011000011111111111111000011000010000000000",
			"111111111110*00110000111111111111110000110*0011111111111",
			"10000000000000000000000000011000000000000000000000000001",
			"10*0*0*0*0*0*0*0*0*0*0*0*00110*0*0*0*0*0*0*0*0*0*0*0*001",
			"10000000000000000000000000011000000000000000000000000001",
			"10*000000000*00000000000*00110*00000000000*000000000*001",
			"10000111111000011111111000011000011111111000011111100001",
			"10*001111110*00111111110*00110*00111111110*001111110*001",
			"10000000011000000000000000000000000000000000011000000001",
			"10*005000110*0*0*0*0*0*0*00000*0*0*0*0*0*0*00110*0050001",
			"10000000011000000000000000000000000000000000011000000001",
			"100000*00110*00000*00000000000000000*00000*00110*0000001",
			"11111000011000011000011111111111111000011000011000011111",
			"111110*00110*00110*00111111111111110*00110*00110*0011111",
			"10000000000000011000000000011000000000011000000000000001",
			"10*0*0*0*0*0*00110*0*0*0*00110*0*0*0*00110*0*0*0*0*0*001",
			"10000000000000011000000000011000000000011000000000000001",
			"10*000000000000110000000*00110*000000001100000000000*001",
			"10000111111111111111111000011000011111111111111111100001",
			"10*001111111111111111110*00110*001111111111111111110*001",
			"10000000000000000000000000000000000000000000000000000001",
			"10*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*0*001",
			"10000000000000000000000000000000000000000000000000000001",
			"10000000000000000000000000000000000000000000000000000001",
			"11111111111111111111111111111111111111111111111111111111",
		};
		sf::RectangleShape WallPaper;

		sf::Texture wallPapertexture;
		sf::Texture gateTexture;

protected:
	//Walls stuff
		sf::RectangleShape Debugger;
		sf::Texture WallTexture;

	//Points stuff
		std::vector <sf::Sprite >Points;
		sf::Sprite point;
		sf::Texture PointsTexture;
		unsigned int pointseaten = 0;

		sf::CircleShape Bigpoint;

	public:
		sf::Sprite gate;
		std::vector<sf::Sprite>gateParts;
		std::vector <sf::CircleShape >BigPoints;
		std::vector<sf::Sprite>walls;
		std::vector<sf::RectangleShape>Debuggers;
		sf::Sprite wall;
		sf::RectangleShape tp1;
		sf::RectangleShape tp2;
		int scoore=0;
		bool won = false;

	public:
	//Constructor / Destructor
		Map(sf::RenderWindow &window,float gridSizef);
	
	//Initialisation functions
		void initBackGround(sf::RenderWindow& window);
		void initWalls(std::vector<sf::Sprite>* walls, sf::Sprite wall, char map[100][100]);
		void initPoints(std::vector<sf::Sprite>* points, sf::Sprite point, char map[100][100]);

	//Update functions
		void updateWallCollision(sf::Sprite* sprite, std::vector<sf::Sprite> walls, sf::Sprite wall, sf::Vector2f* Velocity, sf::FloatRect nextPos, sf::Sound& move_sound);
		void updateGateCollision(sf::Sprite* sprite, std::vector<sf::Sprite> walls, sf::Sprite wall, sf::Vector2f* Velocity, sf::FloatRect nextPos);
		void updatePointCollision(std::vector<sf::Sprite>* points, sf::Sprite point, sf::Sprite shape, sf::Sound& eat_1_sound, sf::Sound &eat_2_sound, unsigned int* level);
		void update(sf::Sprite* sprite, sf::Vector2f* Velocity, sf::FloatRect nextPos, sf::Sound &eat_1_sound, sf::Sound &eat_2_sound, sf::Sound& move_sound,unsigned int *level);

	//Render functions
		void RenderwallPaper(sf::RenderTarget* target);
		void renderWalls(sf::RenderTarget* target, std::vector<sf::Sprite> walls);
		void renderPoints(sf::RenderTarget* target, std::vector<sf::Sprite> points);
		void render(sf::RenderTarget *target,bool paused);
	};
